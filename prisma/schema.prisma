generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String       @id @default(cuid())
  name                  String?
  email                 String       @unique
  password              String?
  emailVerified         DateTime?
  verificationToken     String?      @unique
  verificationMethod    VerificationMethod?
  resetPasswordToken    String?      @unique
  resetPasswordExpires  DateTime?
  role                  UserRole     @default(USER)
  image                 String?
  createdAt             DateTime     @default(now())
  updatedAt             DateTime     @updatedAt
  accounts              Account[]
  sessions              Session[]
  subscription          Subscription?
  payments              Payment[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Payment {
  id              String        @id @default(cuid())
  userId          String
  amount          Float
  currency        String        @default("NPR")
  status          PaymentStatus @default(PENDING)
  transactionCode String?       @unique
  paymentMethod   PaymentMethod
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Subscription {
  id        String    @id @default(cuid())
  userId    String    @unique
  plan      Plan      @default(FREE)
  status    Status    @default(ACTIVE)
  startDate DateTime  @default(now())
  endDate   DateTime?
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Plan {
  FREE
  PRO
  ENTERPRISE
}

enum Status {
  ACTIVE
  CANCELLED
  EXPIRED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

enum PaymentMethod {
  ESEWA
  KHALTI
  BANK_TRANSFER
}

enum UserRole {
  USER
  ADMIN
}

enum VerificationMethod {
  EMAIL_OTP
  MAGIC_LINK
}